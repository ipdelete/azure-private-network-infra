#!/bin/bash

# Pre-commit hook to prevent committing actual SSH public keys
# This hook ensures that only the placeholder "YOUR_SSH_PUBLIC_KEY_HERE" is committed

set -e

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Expected placeholder value
EXPECTED_PLACEHOLDER="YOUR_SSH_PUBLIC_KEY_HERE"

# Function to check if a file contains the expected placeholder
check_ssh_key_placeholder() {
    local file="$1"
    
    # Check if file exists and is being committed
    if git diff --cached --name-only | grep -q "^${file}$"; then
        echo -e "${YELLOW}Checking ${file} for SSH key placeholder...${NC}"
        
        # Get the staged content of the file
        local staged_content=$(git show :"./${file}")
        
        # Check if the adminPublicKey parameter exists and has the correct placeholder
        if echo "$staged_content" | jq -e '.parameters.adminPublicKey.value' > /dev/null 2>&1; then
            local admin_key_value=$(echo "$staged_content" | jq -r '.parameters.adminPublicKey.value')
            
            if [ "$admin_key_value" != "$EXPECTED_PLACEHOLDER" ]; then
                echo -e "${RED}ERROR: SSH public key detected in ${file}${NC}"
                echo -e "${RED}Found: ${admin_key_value}${NC}"
                echo -e "${RED}Expected: ${EXPECTED_PLACEHOLDER}${NC}"
                echo -e "${YELLOW}Please replace the actual SSH key with the placeholder before committing.${NC}"
                return 1
            else
                echo -e "${GREEN}✓ ${file} contains correct placeholder${NC}"
            fi
        fi
    fi
    return 0
}

# Main execution
echo -e "${YELLOW}Running SSH key protection pre-commit hook...${NC}"

# Check all parameter files that might contain SSH keys
PARAM_FILES=(
    "vm/main.parameters.json"
    "*/main.parameters.json"
)

HOOK_FAILED=0

# Check each parameter file
for pattern in "${PARAM_FILES[@]}"; do
    for file in $pattern; do
        # Skip if file doesn't exist or is a glob pattern that didn't match
        if [ -f "$file" ] && [[ "$file" != "*"* ]]; then
            if ! check_ssh_key_placeholder "$file"; then
                HOOK_FAILED=1
            fi
        fi
    done
done

# Additional check: scan for any potential SSH public keys in staged files
echo -e "${YELLOW}Scanning for potential SSH public keys in all staged files...${NC}"

# Get all staged files
STAGED_FILES=$(git diff --cached --name-only)

if [ -n "$STAGED_FILES" ]; then
    # Look for patterns that might be SSH public keys (but not our placeholder)
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            # Check for ssh-rsa, ssh-ed25519, ssh-dss, ssh-ecdsa patterns that are not our placeholder
            if git show ":$file" | grep -E "ssh-(rsa|ed25519|dss|ecdsa) [A-Za-z0-9+/]+" | grep -v "$EXPECTED_PLACEHOLDER" > /dev/null; then
                echo -e "${RED}WARNING: Potential SSH public key found in ${file}${NC}"
                echo -e "${YELLOW}Please verify this is not a real SSH key before committing.${NC}"
                # Note: This is a warning, not a hard failure for other files
            fi
        fi
    done
fi

if [ $HOOK_FAILED -eq 1 ]; then
    echo -e "${RED}Pre-commit hook failed. Commit aborted.${NC}"
    echo -e "${YELLOW}To fix this issue:${NC}"
    echo -e "${YELLOW}1. Replace any actual SSH keys with: ${EXPECTED_PLACEHOLDER}${NC}"
    echo -e "${YELLOW}2. Stage your changes again: git add .${NC}"
    echo -e "${YELLOW}3. Retry your commit${NC}"
    exit 1
fi

echo -e "${GREEN}✓ SSH key protection check passed${NC}"
exit 0
